// lib/services/sync_service.dart

import '../services/who_api_service.dart';
import '../services/db_service.dart';
import '../models/country_stats.dart';

class SyncService {
  static final SyncService instance = SyncService._internal();
  SyncService._internal();

  final WHOApiService _whoApi = WHOApiService.instance;
  final DatabaseService _dbService = DatabaseService.instance;

  // Synchroniser les statistiques WHO
  Future<SyncResult> syncWHOData() async {
    try {
      print('üîÑ D√©but synchronisation WHO...');
      
      final hasInternet = await _whoApi.hasInternetConnection();

      if (!hasInternet) {
        print('‚ö†Ô∏è Pas de connexion internet');
        return SyncResult(
          success: false,
          message: 'Pas de connexion internet.',
          dataSource: DataSource.local,
        );
      }

      final isOutdated = await _dbService.areStatsOutdated();

      if (!isOutdated) {
        print('‚úÖ Donn√©es locales √† jour');
        return SyncResult(
          success: true,
          message: 'Donn√©es √† jour.',
          dataSource: DataSource.local,
        );
      }

      print('üì° R√©cup√©ration depuis API WHO...');
      final stats = await _whoApi.getCancerStatsByCountry(
        countries: [
          'BDI', 'RWA', 'KEN', 'UGA', 'TZA',
          'ETH', 'SOM', 'SSD', 'COD', 'MOZ',
        ],
      );

      if (stats.isEmpty) {
        print('‚ö†Ô∏è API retourne liste vide');
        return SyncResult(
          success: false,
          message: 'Aucune donn√©e re√ßue',
          dataSource: DataSource.api,
        );
      }

      print('üíæ Sauvegarde de ${stats.length} statistiques...');
      await _dbService.saveCountryStats(stats);
      await _dbService.clearOldStats();

      print('‚úÖ Synchronisation r√©ussie');
      return SyncResult(
        success: true,
        message: 'Donn√©es mises √† jour (${stats.length} entr√©es)',
        dataSource: DataSource.api,
        dataCount: stats.length,
      );
    } catch (e) {
      print('‚ùå Erreur synchronisation: $e');
      return SyncResult(
        success: false,
        message: 'Erreur: $e',
        dataSource: DataSource.error,
      );
    }
  }

  // R√©cup√©rer les statistiques
  Future<List<CountryStats>> getStats({bool forceRefresh = false}) async {
    try {
      print('üìä R√©cup√©ration des statistiques...');
      
      if (forceRefresh || await _dbService.areStatsOutdated()) {
        print('üîÑ Synchronisation n√©cessaire');
        await syncWHOData();
      }

      final stats = await _dbService.getCountryStats();
      print('üìà ${stats.length} statistiques en local');

      if (stats.isEmpty) {
        print('‚ö†Ô∏è DB vide - appel direct √† WHOApiService');
        // Au lieu de _getFallbackStats(), appel direct
        return await _whoApi.getCancerStatsByCountry();
      }

      return stats;
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration: $e');
      // En cas d'erreur, appel direct √† WHOApiService
      return await _whoApi.getCancerStatsByCountry();
    }
  }

  // _getFallbackStats() SUPPRIM√âE - plus de duplication!
}

class SyncResult {
  final bool success;
  final String message;
  final DataSource dataSource;
  final int dataCount;

  SyncResult({
    required this.success,
    required this.message,
    required this.dataSource,
    this.dataCount = 0,
  });

  @override
  String toString() {
    return 'SyncResult{success: $success, message: $message, source: $dataSource, count: $dataCount}';
  }
}

enum DataSource {
  local,
  api,
  error,
}