// lib/services/ai_chat_service.dart

import 'package:google_generative_ai/google_generative_ai.dart';
import '../models/patient.dart';
import '../services/db_service.dart'; // <--- CETTE LIGNE EST ESSENTIELLE

class AIChatService {
  static final AIChatService instance = AIChatService._internal();
  AIChatService._internal();

  // üîë M√äME CL√â QUE AI_SERVICE
  static const String _apiKey = 'AIzaSyA9KlGdCICCiPJS9YAHu_8P2JXXix_vUQw';

  // late final GenerativeModel _model;
  GenerativeModel? _model; // MODIFI√â : Rendu optionnel
  // late final ChatSession _chatSession;
  ChatSession? _chatSession; // MODIFI√â : Rendu optionnel
  Patient? _currentPatient;

  // Initialiser le chat pour un patient sp√©cifique
  void initializeChat(Patient patient) {
    // _currentPatient = patient;

    // _model = GenerativeModel(
    //   model: 'gemini-pro',
    //   apiKey: _apiKey,
    //   generationConfig: GenerationConfig(
    //     temperature: 0.7,
    //     topK: 40,
    //     topP: 0.95,
    //     maxOutputTokens: 1024,
    //   ),
    // );
    // V√©rifie si la session est d√©j√† initialis√©e pour ce patient
    if (_currentPatient != null &&
        _currentPatient!.id == patient.id &&
        _chatSession != null) {
      return; // Ne fait rien si c'est le m√™me patient et la session est active
    }

    _currentPatient = patient;

    // üí° S'assurer que _model est initialis√© une seule fois pour tous les patients
    if (_model == null) {
      _model = GenerativeModel(
        model: 'gemini-pro',
        apiKey: _apiKey,
        generationConfig: GenerationConfig(
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        ),
      );
    }

    // Contexte initial du patient pour l'IA
    final systemPrompt =
        '''
Tu es un assistant m√©dical virtuel expert et bienveillant.

Informations du patient actuel :
- Nom : ${patient.nomComplet}
- √Çge : ${patient.age} ans
- Pays : ${patient.pays}
- Diagnostic : ${patient.maladie}
- Conseils actuels : ${patient.conseils ?? 'Aucun'}

Consignes IMPORTANTES :
1. R√©ponds TOUJOURS en fran√ßais simple
2. Sois empathique et rassurant
3. Adapte tes r√©ponses √† ${patient.maladie}
4. Consid√®re le contexte africain (${patient.pays})
5. Pour les m√©dicaments, donne des conseils g√©n√©raux mais rappelle de consulter le m√©decin
6. Si question dangereuse/urgente, recommande imm√©diatement de consulter
7. Reste dans ton domaine m√©dical, ne r√©ponds pas aux questions hors sujet
8. Limite tes r√©ponses √† 3-4 phrases maximum

Tu es pr√™t √† r√©pondre aux questions du patient.
''';

    _chatSession = _model!.startChat(
      history: [
        Content.text(systemPrompt),
        Content.model([
          TextPart(
            'Je comprends. Je suis pr√™t √† aider ${patient.prenom} avec des conseils m√©dicaux adapt√©s √† ${patient.maladie}.',
          ),
        ]),
      ],
    );
  }

  // Envoyer un message au chatbot
  Future<ChatResponse> sendMessage(String userMessage) async {
    if (_currentPatient == null) {
      throw Exception(
        'Chat non initialis√©. Appelez initializeChat() d\'abord.',
      );
    }

    if (_apiKey == 'AIzaSyA9KlGdCICCiPJS9YAHu_8P2JXXix_vUQw') {
      // Mode offline - r√©ponses pr√©d√©finies
      return _getOfflineResponse(userMessage);
    }

    try {
      print('üë§ User: $userMessage');

      final content = Content.text(userMessage);
      final response = await _chatSession!.sendMessage(content);

      if (response.text == null || response.text!.isEmpty) {
        throw Exception('R√©ponse vide de l\'IA');
      }

      print('ü§ñ AI: ${response.text}');

      return ChatResponse(
        message: response.text!,
        isFromUser: false,
        timestamp: DateTime.now(),
        source: MessageSource.ai,
      );
    } catch (e) {
      print('‚ùå Erreur chat IA: $e');
      return _getOfflineResponse(userMessage);
    }
  }

  // R√©ponses offline bas√©es sur mots-cl√©s
  ChatResponse _getOfflineResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();
    String response;

    // D√©tection par mots-cl√©s (votre code original, inchang√©)
    if (lowerMessage.contains('m√©dicament') ||
        lowerMessage.contains('medicament') ||
        lowerMessage.contains('traitement') ||
        lowerMessage.contains('pilule')) {
      response =
          'Pour les m√©dicaments de ${_currentPatient!.maladie}, il est essentiel de les prendre r√©guli√®rement aux heures prescrites. Ne jamais arr√™ter sans avis m√©dical. En cas d\'oubli, consultez la notice ou votre m√©decin.';
    } else if (lowerMessage.contains('manger') ||
        lowerMessage.contains('aliment') ||
        lowerMessage.contains('nutrition') ||
        lowerMessage.contains('nourriture')) {
      response =
          'Pour ${_currentPatient!.maladie}, privil√©giez les fruits frais, l√©gumes, et √©vitez les aliments transform√©s. Buvez beaucoup d\'eau. Une alimentation √©quilibr√©e aide au traitement.';
    } else {
      response =
          'Je peux vous aider avec des questions sur les m√©dicaments, l\'alimentation, l\'exercice, ou la gestion de ${_currentPatient!.maladie}. N\'h√©sitez pas √† me poser une question pr√©cise.';
    }

    return ChatResponse(
      message: response,
      isFromUser: false,
      timestamp: DateTime.now(),
      source: MessageSource.local,
    );
  }

  // =======================================================================
  // NOUVELLE M√âTHODE POUR G√âN√âRER LES CONSEILS (REMPLACE L'ANCIENNE)
  // =======================================================================
  Future<AdviceResponse> generateAdvice(Patient patient) async {
    if (_apiKey == 'AIzaSyA9KlGdCICCiPJS9YAHu_8P2JXXix_vUQw') {
      print('üîß Mode offline : Utilisation des conseils locaux.');
      return _getLocalAdviceFallback(patient); // Appel de la m√©thode renomm√©e
    }

    final model = GenerativeModel(model: 'gemini-pro', apiKey: _apiKey);

    final prompt =
        '''
      G√©n√®re une liste de 4 conseils de sant√© courts, pratiques et faciles √† suivre pour un patient avec le profil suivant :
      - Diagnostic : ${patient.maladie}
      - √Çge : ${patient.age} ans
      - Pays : ${patient.pays}
      Instructions :
      1. Les conseils doivent √™tre directement applicables dans un contexte africain (${patient.pays}).
      2. Formule chaque conseil en une seule phrase simple.
      3. Retourne UNIQUEMENT la liste des conseils, sans introduction ni conclusion.
      4. S√©pare chaque conseil par un retour √† la ligne.
      ''';

    try {
      print('‚ú® Envoi de la requ√™te de conseils √† l\'IA...');
      final content = Content.text(prompt);
      final response = await model.generateContent([content]);

      if (response.text == null || response.text!.isEmpty) {
        throw Exception('R√©ponse vide de l\'IA');
      }

      final adviceList = response.text!
          .split('\n')
          .where((s) => s.trim().isNotEmpty)
          .map((s) => s.startsWith('- ') ? s.substring(2) : s)
          .toList();

      print('‚úÖ Conseils IA re√ßus : ${adviceList.length} √©l√©ments');

      patient.conseils = adviceList.join('\n');
      await DatabaseService.instance.updatePatient(patient);

      // Ici, on appelle le constructeur de la classe AdviceResponse, c'est correct
      return AdviceResponse(advice: adviceList, source: MessageSource.ai);
    } catch (e) {
      print('‚ùå Erreur lors de la g√©n√©ration de conseils IA: $e');
      return _getLocalAdviceFallback(patient); // Appel de la m√©thode renomm√©e
    }
  }

  // =======================================================================
  // M√âTHODE RENOMM√âE POUR √âVITER LE CONFLIT (REMPLACE _getOfflineAdvice)
  // =======================================================================
  AdviceResponse _getLocalAdviceFallback(Patient patient) {
    List<String> advice;
    final lowerDisease = patient.maladie.toLowerCase();

    if (lowerDisease.contains('diab√®te')) {
      advice = [
        'Contr√¥lez votre glyc√©mie chaque jour avant le petit-d√©jeuner.',
        'Marchez 30 minutes au moins 5 fois par semaine.',
        'Privil√©giez les aliments locaux riches en fibres comme le manioc ou l\'igname.',
        'Buvez beaucoup d\'eau pure et √©vitez les boissons sucr√©es.',
      ];
    } else if (lowerDisease.contains('hypertension')) {
      advice = [
        'R√©duisez votre consommation de sel et de cubes de bouillon.',
        'Consommez des fruits comme la banane, riche en potassium.',
        'Essayez de vous d√©tendre quelques minutes chaque jour par la respiration.',
        'Prenez votre traitement chaque jour √† la m√™me heure, m√™me si vous vous sentez bien.',
      ];
    } else {
      advice = [
        'Buvez au moins 1.5 litre d\'eau par jour pour rester hydrat√©.',
        'Assurez-vous de bien dormir entre 7 et 8 heures par nuit.',
        'Mangez des repas √©quilibr√©s avec des l√©gumes et des fruits locaux.',
        'Parlez √† un professionnel de sant√© avant de prendre un nouveau m√©dicament.',
      ];
    }

    patient.conseils = advice.join('\n');
    DatabaseService.instance.updatePatient(patient);

    // Ici, on appelle le constructeur de la classe AdviceResponse, c'est correct
    return AdviceResponse(advice: advice, source: MessageSource.local);
  }

  // Suggestions de questions
  List<String> getSuggestedQuestions() {
    if (_currentPatient == null) return [];
    return [
      'Comment prendre mes m√©dicaments ?',
      'Quels aliments sont bons pour moi ?',
      'Que faire en cas de douleur ?',
      'Quels exercices puis-je faire ?',
      'Comment g√©rer la fatigue ?',
      'Que faire en cas d\'urgence ?',
    ];
  }

  // Obtenir l'historique du chat
  int getMessageCount() {
    return 0; // Placeholder
  }

  // R√©initialiser le chat
  void resetChat() {
    if (_currentPatient != null) {
      initializeChat(_currentPatient!);
    }
  }
}

// Mod√®le pour les r√©ponses du chat
class ChatResponse {
  final String message;
  final bool isFromUser;
  final DateTime timestamp;
  final MessageSource source;

  ChatResponse({
    required this.message,
    required this.isFromUser,
    required this.timestamp,
    required this.source,
  });
}

// Mod√®le pour le retour des conseils (correspond √† 'result')
class AdviceResponse {
  final List<String> advice;
  final MessageSource source;

  AdviceResponse({required this.advice, required this.source});
}

enum MessageSource {
  ai, // R√©ponse de l'IA Gemini
  local, // R√©ponse locale pr√©d√©finie
  user, // Message de l'utilisateur
}
