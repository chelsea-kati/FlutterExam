// lib/services/db_service.dart
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../models/patient.dart';
import '../models/country_stats.dart';
import '../models/sponsor.dart';
import '../models/Conseil.dart'; // Renomm√© 'advice.dart' pour le mod√®le Conseil dans les √©tapes pr√©c√©dentes


class DatabaseService {
 static Database? _database;
 static const String tableName = 'Patients';
 // üî• MODE DEBUG : Change √† true SEULEMENT pour r√©initialiser la DB
// ‚ö†Ô∏è ATTENTION : Mets √† false avant de publier l'app !
// static const bool FORCE_RESET_DB = true;//pour ins√©rer les patients de test (une seule fois).
static const bool FORCE_RESET_DB = false;

//üéØ MODE AUTO : Ins√®re les donn√©es de test si la DB est vide
static const bool AUTO_INSERT_TEST_DATA = true;

// Singleton pattern
static final DatabaseService instance = DatabaseService._internal();
factory DatabaseService() => instance;
DatabaseService._internal();

// Getter pour la database
Future<Database> get database async {
   _database ??= await _initDatabase();
 return _database!;
}

// Initialisation de la database
Future<Database> _initDatabase() async {
String path = join(await getDatabasesPath(), 'patients.db');

// üî• SI MODE DEBUG, supprimer l'ancienne base
if (FORCE_RESET_DB) {
 print('‚ö†Ô∏è MODE DEBUG : Suppression de l\'ancienne base de donn√©es...');
  await deleteDatabase(path);
 }

 print('üìÇ Chemin de la base de donn√©es : $path');

 return await openDatabase(
 path,
 version: 1,
 onCreate: _createDatabase,
 onOpen: (db) async {
 print('‚úÖ Base de donn√©es ouverte avec succ√®s');
 // V√©rifier le nombre de patients au d√©marrage
 final count = await db.rawQuery('SELECT COUNT(*) FROM $tableName');
 print(
 'üìä Nombre de patients dans la DB : ${Sqflite.firstIntValue(count)}',
  );
 },
 );
 }

 // Cr√©er les tables
 Future<void> _createDatabase(Database db, int version) async {
   print('üìÖ Cr√©ation de la base de donn√©es...');

 // Table des patients
 await db.execute('''
 CREATE TABLE $tableName (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 nom TEXT NOT NULL,
 prenom TEXT NOT NULL,
 age INTEGER NOT NULL,
 pays TEXT NOT NULL,
 dateCreation TEXT NOT NULL,
 maladie TEXT NOT NULL,
 conseils TEXT,
 derniereVisite TEXT
 )
 ''');
 print('‚úÖ Table Patients cr√©√©e');

 // Table pour les statistiques WHO
 await db.execute('''
 CREATE TABLE country_stats (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 countryCode TEXT NOT NULL,
 countryName TEXT NOT NULL,
 value REAL NOT NULL,
 year INTEGER NOT NULL,
 indicator TEXT NOT NULL,
 lastUpdated TEXT NOT NULL,
 UNIQUE(countryCode, year, indicator)
 )
 ''');
 print('‚úÖ Table country_stats cr√©√©e');
 // Ins√©rer les donn√©es de test
 // await _insertTestData(db);
 // ‚ú® NOUVEAU : Table des conseils
 await db.execute('''
 CREATE TABLE conseils (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 titre TEXT,
 maladieCible TEXT,
 description TEXT,
 source TEXT
 )
''');
 print('‚úÖ Table Conseils cr√©√©e');

    // üí° APPEL DE LA FONCTION : Ins√©rer les conseils par d√©faut juste apr√®s la cr√©ation de la table
    await insertInitialConseils(db);

 // ‚ú® NOUVEAU : Table des sponsors
 await db.execute('''
 CREATE TABLE sponsors (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 nom TEXT,
 type TEXT,
 logoUrl TEXT,
 siteWeb TEXT,
 dateAdhesion TEXT
 )
 ''');
 print('‚úÖ Table Sponsors cr√©√©e');
 }

 // Donn√©es de test
 Future<void> _insertTestData(Database db) async {
 print('üîÑ Insertion des donn√©es de test...');

 final testPatients = [
 Patient(
 nom: 'Doe',
 prenom: 'John',
 age: 45,
 pays: 'Burundi',
 maladie: 'Cancer du poumon',
 conseils:
 'Manger √©quilibr√©, faire de l\'exercice, suivre le traitement',
 derniereVisite: DateTime.now().subtract(const Duration(days: 2)),
 ),
 Patient(
 nom: 'Smith',
 prenom: 'Jane',
 age: 32,
 pays: 'Rwanda',
 maladie: 'VIH',
 conseils: 'Prendre les ARV r√©guli√®rement, manger sainement',
 derniereVisite: DateTime.now().subtract(const Duration(days: 7)),
 ),
 Patient(
 nom: 'Uwimana',
 prenom: 'Marie',
 age: 28,
 pays: 'Burundi',
 maladie: 'Cancer du sein',
 conseils: 'Chimioth√©rapie, repos, soutien familial',
 derniereVisite: DateTime.now().subtract(const Duration(days: 15)),
 ),
       // Ajout de patients pour faire fonctionner les stats/conseils
       Patient(nom: 'Ndayishimiye', prenom: 'Alex', age: 60, pays: 'Burundi', maladie: 'Cancer de la prostate', conseils: 'Suivi r√©gulier.', derniereVisite: DateTime.now()),
       Patient(nom: 'Mugisha', prenom: 'Fanny', age: 70, pays: 'Rwanda', maladie: 'Cancer colorectal', conseils: 'Alimentation riche en fibres.', derniereVisite: DateTime.now()),
       Patient(nom: 'Karekezi', prenom: 'Aim√©', age: 40, pays: 'RDC', maladie: 'Leuc√©mie', conseils: 'Repos strict.', derniereVisite: DateTime.now()),
 ];

 for (final patient in testPatients) {
 print('‚ûï Insertion patient: ${patient.nomComplet}');
 final result = await db.insert(
 tableName,
 patient.toMap(),
 conflictAlgorithm: ConflictAlgorithm.replace,
 );
 print('  ‚úì Patient ins√©r√© avec ID: $result');
 }

 // V√©rifier l'insertion
 final count = await db.rawQuery('SELECT COUNT(*) FROM $tableName');
 print(
 '‚úÖ Donn√©es de test ins√©r√©es : ${Sqflite.firstIntValue(count)} patients',
 );
 }

 // ------------------------------------------------------------------
  // üí° NOUVELLE FONCTION : Ins√®re les conseils par d√©faut
  // ------------------------------------------------------------------
  Future<void> insertInitialConseils(Database db) async {
    print('üîÑ Insertion des conseils m√©dicaux par d√©faut...');
    
    final initialConseils = [
      Conseil(
        titre: 'D√©pistage R√©gulier et Autopalpation',
        maladieCible: 'Cancer du sein',
        description: 'L\'autopalpation mensuelle et la mammographie r√©guli√®re (selon l\'√¢ge) sont cruciales pour une d√©tection pr√©coce, augmentant consid√©rablement les chances de succ√®s du traitement.',
        source: 'OMS/Sant√© Nationale',
      ).toMap(),
      Conseil(
        titre: 'Arr√™t du Tabac Imm√©diat',
        maladieCible: 'Cancer du poumon',
        description: 'Le sevrage tabagique est la mesure la plus importante. Il ralentit la progression et r√©duit le risque de r√©cidive.',
        source: 'Ligue contre le Cancer',
      ).toMap(),
      Conseil(
        titre: 'Coloscopie et Alimentation Saine',
        maladieCible: 'Cancer colorectal',
        description: 'Maintenez une alimentation riche en fibres (fruits, l√©gumes) et r√©duisez la consommation de viandes rouges transform√©es. Le d√©pistage par coloscopie est recommand√© √† partir de 50 ans.',
        source: 'Soci√©t√© de Gastro-ent√©rologie',
      ).toMap(),
      Conseil(
        titre: 'Suivi PSA et Examen Rectal',
        maladieCible: 'Cancer de la prostate',
        description: 'Discutez avec votre m√©decin d\'un d√©pistage r√©gulier par dosage de l\'antig√®ne prostatique sp√©cifique (PSA) et examen rectal, surtout apr√®s 50 ans.',
        source: 'Urologie Afrique',
      ).toMap(),
      Conseil(
        titre: 'Gestion des Infections et Surveillance',
        maladieCible: 'Leuc√©mie',
        description: 'Les patients sous traitement sont vuln√©rables aux infections. Une hygi√®ne stricte et la notification imm√©diate de la fi√®vre sont vitales.',
        source: 'H√©matologie Clinic',
      ).toMap(),
      Conseil(
        titre: 'Protection Immunitaire',
        maladieCible: 'Lymphome',
        description: '√âvitez les foules et les environnements √† haut risque d\'infection pendant les phases de traitement qui compromettent le syst√®me immunitaire.',
        source: 'Manuel de Soins',
      ).toMap(),
      Conseil(
        titre: 'Protection Solaire Maximale',
        maladieCible: 'M√©lanome',
        description: '√âviter l\'exposition au soleil entre 10h et 16h, utiliser une cr√®me solaire √† indice √©lev√© (SPF 30+) et porter des v√™tements protecteurs. Surveillez tout changement de grains de beaut√©.',
        source: 'Dermatologie',
      ).toMap(),
      Conseil(
        titre: 'R√©duction du Sel et des Aliments Fum√©s',
        maladieCible: 'Cancer de l\'estomac',
        description: 'R√©duisez la consommation d\'aliments fortement sal√©s, marin√©s ou fum√©s, qui sont li√©s √† un risque accru de cancer gastrique. Traitez l\'infection √† H. pylori si pr√©sente.',
        source: 'IARC',
      ).toMap(),
      Conseil(
        titre: 'Limitation de l\'Alcool et Traitement de l\'H√©patite',
        maladieCible: 'Cancer du foie',
        description: 'L\'abus d\'alcool et l\'h√©patite B/C sont les principaux facteurs de risque. La vaccination contre l\'h√©patite B et le traitement des infections chroniques sont essentiels.',
        source: 'H√©pato-Gastro',
      ).toMap(),
    ];

    for (var conseilMap in initialConseils) {
      await db.insert(
        'conseils',
        conseilMap,
        conflictAlgorithm: ConflictAlgorithm.ignore,
      );
    }
    print('‚úÖ ${initialConseils.length} conseils ins√©r√©s (si non existants).');
  }
 // ------------------------------------------------------------------

 // CREATE - Ajouter un nouveau patient
 Future<int> insertPatient(Patient patient) async {
 // ... (Logique inchang√©e)
    final db = await database;
    final id = await db.insert(
      tableName,
      patient.toMap(),
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
    print('‚úÖ Patient ajout√© avec ID: $id');
    return id;
 }

 // READ - R√©cup√©rer tous les patients
 Future<List<Patient>> getAllPatients() async {
 // ... (Logique inchang√©e)
    print('üìñ R√©cup√©ration de tous les patients...');
    final db = await database;
    final maps = await db.query(tableName, orderBy: 'dateCreation DESC');

    print('üìä Nombre de patients trouv√©s: ${maps.length}');

    if (maps.isEmpty) {
      print('‚ö†Ô∏è Aucun patient dans la base !');
      return [];
    }

    return List.generate(maps.length, (i) {
      print(' ¬† Patient ${i + 1}: ${maps[i]['nom']} ${maps[i]['prenom']}');
      return Patient.fromMap(maps[i]);
    });
 }

 // READ - R√©cup√©rer un patient par ID
 Future<Patient?> getPatientById(int id) async {
 // ... (Logique inchang√©e)
    final db = await database;
    final maps = await db.query(tableName, where: 'id = ?', whereArgs: [id]);
    if (maps.isNotEmpty) {
      return Patient.fromMap(maps.first);
    }
    return null;
 }

 // READ - Rechercher des patients
 Future<List<Patient>> searchPatients(String query) async {
 // ... (Logique inchang√©e)
    final db = await database;
    final maps = await db.query(
      tableName,
      where: 'nom LIKE ? OR prenom LIKE ? OR maladie LIKE ? OR pays LIKE ?',
      whereArgs: ['%$query%', '%$query%', '%$query%', '%$query%'],
      orderBy: 'dateCreation DESC',
    );

    return List.generate(maps.length, (i) {
      return Patient.fromMap(maps[i]);
    });
 }

 // UPDATE - Modifier un patient
 Future<int> updatePatient(Patient patient) async {
 // ... (Logique inchang√©e)
    final db = await database;
    return await db.update(
      tableName,
      patient.toMap(),
      where: 'id = ?',
      whereArgs: [patient.id],
    );
 }

 // DELETE - Supprimer un patient
 Future<int> deletePatient(int id) async {
 // ... (Logique inchang√©e)
    final db = await database;
    return await db.delete(tableName, where: 'id = ?', whereArgs: [id]);
 }

 // ========== STATISTIQUES PATIENTS ==========

 // Compter les patients
 Future<int> getPatientCount() async {
 // ... (Logique inchang√©e)
    print('üî¢ Comptage des patients...');
    final db = await database;
    final result = await db.rawQuery('SELECT COUNT(*) FROM $tableName');
    final count = Sqflite.firstIntValue(result) ?? 0;
    print('üìä Nombre total de patients: $count');
    return count;
 }

 // Patients par pays
Future<List<Map<String, dynamic>>> getPatientsByCountry() async {
 // ... (Logique inchang√©e)
    final db = await database;
    final result = await db.rawQuery('''
      SELECT pays, COUNT(id) AS count
      FROM patients
      GROUP BY pays
      ORDER BY count DESC
    ''');
    return result;
}

 // Patients par maladie
 Future<List<Map<String, dynamic>>> getPatientsByDisease() async {
 // ... (Logique inchang√©e)
    final db = await database;
    final result = await db.rawQuery('''
      SELECT maladie, COUNT(id) as count
      FROM patients
      GROUP BY maladie
      ORDER BY count DESC
    ''');
    return result;
}

 // ========== STATISTIQUES WHO ==========

 Future<void> saveCountryStats(List<CountryStats> stats) async {
 // ... (Logique inchang√©e)
    final db = await database;
    for (final stat in stats) {
      await db.insert(
        'country_stats',
        stat.toMap(),
        conflictAlgorithm: ConflictAlgorithm.replace,
      );
    }
 }

 Future<List<CountryStats>> getCountryStats({String? countryCode}) async {
 // ... (Logique inchang√©e)
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'country_stats',
      where: countryCode != null ? 'countryCode = ?' : null,
      whereArgs: countryCode != null ? [countryCode] : null,
      orderBy: 'year DESC',
    );
    return List.generate(maps.length, (i) => CountryStats.fromMap(maps[i]));
 }

 Future<bool> areStatsOutdated() async {
 // ... (Logique inchang√©e)
    final db = await database;
    final result = await db.query(
      'country_stats',
      columns: ['lastUpdated'],
      orderBy: 'lastUpdated DESC',
      limit: 1,
    );
    if (result.isEmpty) return true;
    final lastUpdate = DateTime.parse(result.first['lastUpdated'] as String);
    return DateTime.now().difference(lastUpdate).inDays > 7;
 }

 Future<void> clearOldStats() async {
 // ... (Logique inchang√©e)
    final db = await database;
    final oneWeekAgo = DateTime.now().subtract(const Duration(days: 7));
    await db.delete(
      'country_stats',
      where: 'lastUpdated < ?',
      whereArgs: [oneWeekAgo.toIso8601String()],
    );
 }





// 2. Pour la PatientDetailPage (Conseils)
Future<Conseil?> getConseilByMaladie(String maladieCible) async {
 // ... (Logique inchang√©e)
    final db = await database;
    final maps = await db.query(
      'conseils',
      where: 'maladieCible = ?',
      whereArgs: [maladieCible],
      limit: 1, // On ne veut qu'un seul conseil pertinent
    );

    if (maps.isNotEmpty) {
      return Conseil.fromMap(maps.first);
    }
    return null;
}

// 3. Exemple pour ins√©rer des conseils pr√©-enregistr√©s (utile pour le d√©marrage)
Future<int> insertConseil(Conseil conseil) async {
 // ... (Logique inchang√©e)
    final db = await database;
    return await db.insert('conseils', conseil.toMap(),
        conflictAlgorithm: ConflictAlgorithm.replace);
}
 // Fermer la database
 Future<void> close() async {
 // ... (Logique inchang√©e)
    final db = await database;
    await db.close();
 }

 // üõ†Ô∏è M√âTHODE DEBUG : Afficher toutes les donn√©es
 Future<void> debugPrintAllData() async {
 // ... (Logique inchang√©e)
    print('\n========== DEBUG DATABASE ==========');
    final db = await database;

    // Compter les patients
    final count = await db.rawQuery('SELECT COUNT(*) FROM $tableName');
    print('Total patients: ${Sqflite.firstIntValue(count)}');

    // Lister tous les patients
    final patients = await db.query(tableName);
    print('\nListe des patients:');
    for (var patient in patients) {
      print(
        ' - ID: ${patient['id']}, Nom: ${patient['nom']} ${patient['prenom']}',
      );
    }
    print('====================================\n');
 }
}